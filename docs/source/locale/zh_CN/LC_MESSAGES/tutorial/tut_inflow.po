# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Chen Zhang
# This file is distributed under the same license as the informatics
# package.
# Marin <381017759@qq.com>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: informatics 0.0.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-03-18 18:16+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Chen Zhang <chen.zhang_06sept@foxmail.com>\n"
"Language: zh_CN\n"
"Language-Team: Chen Zhang <chen.zhang_06sept@foxmail.com>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../source/tutorial/tut_inflow.rst:2
msgid "_`Operations on file search and mapping`"
msgstr "文件搜索及映射操作"

#: ../../source/tutorial/tut_inflow.rst:4
msgid ""
"Most of the analysis occurs on data stored in the file system. The "
"ability to accurately manipulate (primarily loading) these files is an "
"essential skill. Accurately loading and manipulating files improves the "
"overall efficiency of the process, as it ensures that the correct data is"
" being used for analysis, reducing the risk of errors and "
"inconsistencies."
msgstr ""
"大部分分析都是针对存储在文件系统中的数据进行的。精确地对文件进行操作（主要是加载）的能力是"
"一项基础技能。准确地对文件加载和操作可以提高整个流程的效率，它可以确保使用正确的数据进行"
"分析，降低错误和不一致的风险。"

#: ../../source/tutorial/tut_inflow.rst:9
msgid ""
"Engineering implementation of file operations requires good understanding"
" of the file structure and format, as well as size and complexity of the "
"files being analyzed. Large or complex files can pose challenges in terms"
" of processing power, memory usage, and time required for analysis."
msgstr ""
"文件操作的工程化实现需要充分了解文件结构和格式，以及所分析文件的大小及复杂程度。"
"针对大型或复杂的文件的操作会在处理能力、内存使用和分析所需的时间方面带来挑战。"

#: ../../source/tutorial/tut_inflow.rst:14
msgid "_`Applying generator function`"
msgstr "应用生成器函数"

#: ../../source/tutorial/tut_inflow.rst:16
msgid ""
"For persistent inflow data, the cost of memory consuming should be under "
"consideration. :numref:`generator function` demonstrates the logic to "
"return a iterable container via two different implemented methods. "
"Compare to the case of :code:`iter2`, :code:`iter1` will increasingly "
"occupy the cache until release after return, which readily results in "
"memory leak if the scale of :code:`cases` is large enough."
msgstr ""
"对于持续流入的数据，内存开销是一个不得不考虑的一个问题。\ :numref:`代码 %s <generator function>`\ 演示了"
"实现返回一个可迭代容器的两种不同处理逻辑。与\ :code:`iter2`\ 相比，\ :code:`iter1`\ 会"
"持续增加缓存的占用，直到结果打包返回后才会被释放。如果\ :code:`cases`\ 容器被撑到足够大，就很容易导致内存的泄漏。"

#: ../../source/tutorial/tut_inflow.rst:21
msgid "generator function"
msgstr "生成器函数"

#: ../../source/tutorial/tut_inflow.rst:41
msgid ""
"Notably, the tuple comprehension in Python will trigger lazy evaluation. "
"In that case a generator object will be return. From example above, "
":code:`iter3` can be seem as an another equivalent implementation for "
":code:`iter2`."
msgstr ""
"值得注意的是，在Python中进行元组推导会触发延迟求值。种情况下，将返回一个生成器对象。"
"从上面的例子来看，\ :code:`iter3`\ 可以被看作是\ :code:`iter2`\ 的一个等效实现"

#: ../../source/tutorial/tut_inflow.rst:45
msgid "_`File searcher and folder relocation`"
msgstr "_`文件检索器与文件夹重定位`"

#: ../../source/tutorial/tut_inflow.rst:47
msgid ""
"For universality, interfaces of search or filtering are designed in form "
"of high-order function. Example of :numref:`file searcher` shows two "
"different pipelines for searching image files with `jpg` or `jpeg` "
"suffix, and for finding empty files."
msgstr ""
"考虑到通用性，搜索和过滤接口均采用了高阶函数的设计形式。\ :numref:`代码 %s <file searcher>`\ 展示了"
"两种不同的管道，分别用于搜索带有jpg或jpeg后缀的图像文件，以及查找系统中的空文件。"

#: ../../source/tutorial/tut_inflow.rst:51
msgid "file searcher"
msgstr "文件检索器"

#: ../../source/tutorial/tut_inflow.rst:76
msgid ""
"Occasionally files in identical folder needs some kind of uniformed "
"treatment (like using labels as folder names for data with different "
"attributes). Under this circumstance, folder relocation can escape "
"redundant operation on files. Following the :code:`p1` in :numref:`file "
"searcher`, the example implementation in :numref:`folder relocation` "
"shows an operation of reading images located in different file folders "
"named using file format suffix (as shown in :ref:`example right side "
"<file structure for JPG and BMP>`)."
msgstr ""
"有时，针对同一文件夹下的文件需要以一种统一的处理方式来进行处理（例如以所存文件的某"
"些共有属性作为其存放目录名称标记的文件夹）。这种情况下，对文件夹的重定位能够"
"绕开对文件的冗余操作。继续以\ :numref:`代码 %s <file searcher>`\ 中"
"的\ :code:`p1`\ 管道为例，\ :numref:`代码 %s <folder relocation>`\ 中的案例实现，展示了"
"某种针对位于以文件后缀格式来命名的不同文件夹中，对图像进行加载的操作实现"
"（文件系统结构如\ :ref:`右图 <file structure for JPG and BMP>`\ 所示）。"

#: ../../source/tutorial/tut_inflow.rst:82
msgid ""
"Those two searchers can both be run, in desktop or hadoop distributed "
"file systems. Refer their documentations for details."
msgstr ""
"以上介绍的两个搜索器，都可以基于传统桌面系统，或者是以hadoop架构的分布式文件存储系统中正常运行。"
"具体细节可以参阅其帮助文档。"

#: ../../source/tutorial/tut_inflow.rst:85
msgid "folder relocation"
msgstr "文件夹重定位"

#: ../../source/tutorial/tut_inflow.rst:94
msgid "_`Universal data loader`"
msgstr "通用数据加载器"

#: ../../source/tutorial/tut_inflow.rst:96
msgid ""
"The charm of :ref:`functional programming <Abstraction for behaviors>` is"
" using function to define behaviors. It is of greater scalability to deal"
" with different dataset. Simple combination and definition can make "
"pipeline be capable for loading any type of data:"
msgstr ""
"\ :ref:`函数式编程 <Abstraction for behaviors>`\ 的魅力在于利用函数来制定对数据操作的具体行为。"
"这使得在处理不同的数据集时，代码逻辑具备更大的可扩展性。通对简单地对函数进行组合，以及定义相应的操作逻辑，"
"使得管道能够胜任加载任何类型的数据："

#: ../../source/tutorial/tut_inflow.rst:100
msgid "meta data loader"
msgstr "元数据加载器"

#: ../../source/tutorial/tut_inflow.rst
msgid "Authors"
msgstr "译者"

#: ../../source/tutorial/tut_inflow.rst:116
msgid "Chen Zhang"
msgstr "`Marin <381017759@qq.com>`_ ; Chen Zhang"

#: ../../source/tutorial/tut_inflow.rst
msgid "Version"
msgstr "版本"

#: ../../source/tutorial/tut_inflow.rst:117
msgid "0.0.4"
msgstr ""

#: ../../source/tutorial/tut_inflow.rst
msgid "|create|"
msgstr "创建于"

#: ../../source/tutorial/tut_inflow.rst:118
msgid "Feb 18, 2024"
msgstr "2024年2月18日"

