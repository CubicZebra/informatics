# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Chen Zhang
# This file is distributed under the same license as the informatics
# package.
# Marin <381017759@qq.com>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: informatics 0.0.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-03-18 18:16+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Chen Zhang <chen.zhang_06sept@foxmail.com>\n"
"Language: zh_CN\n"
"Language-Team: Chen Zhang <chen.zhang_06sept@foxmail.com>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../source/tutorial/tut_pipe.rst:2
msgid "_`Pipelining the data process`"
msgstr "数据处理中管道化实现"

#: ../../source/tutorial/tut_pipe.rst:4
msgid ""
"As the preferred language for artificial intelligence, Python is featured"
" as its rich ecosystem, as well as the convenience for fast "
"implementation and developing. Data processing involving in different "
"technical approaches requires systematical integration. Thus, the unified"
" data controlling among those utilities contributes to accelerate "
"verifying prototypes, optimize algorithm performance, as well as lower "
"maintenance cost."
msgstr ""
"作为人工智能的首选语言，Python以其丰富的生态系统以及快速实现和开发的便利性而闻名。"
"运用不同技术栈的数据处理方法需要以系统化的方式集成。因此，在不同技术栈间构建统一的数据控制，将"
"有助于加速实现原型的验证，优化算法性能，进而降低运维的成本。"

#: ../../source/tutorial/tut_pipe.rst:14
msgid "ecosystem of Python"
msgstr "Python生态系统"

#: ../../source/tutorial/tut_pipe.rst:16
msgid ""
"Data processing is akin to an assembly line, where an increase in the "
"number of steps results in a exponential growth of factors that can "
"impact the final result. While manually configuring all possible options "
"for trial may seem feasible, it often leads to a chaotic outcome."
msgstr ""
"数据处理类似于装配流水线，其中步骤数量的增多会导致能影响最终结果的因素呈指数级增长。"
"虽然手动管控所有流程节点中的参数可选项直观上似乎可行，但（随着系统复杂度的上升）"
"最后却往往会导致其结果的混乱不堪。"

#: ../../source/tutorial/tut_pipe.rst:20
msgid ""
"An uniform protocol, or programming norm, is therefore not only of "
"advantages in integrating various tools developed by teams in different "
"fields in Python ecosystem, but also time-saving for building practical "
"pipelines or applications, on basis of each naive functional module. "
"Following examples demonstrate how to establish pipelines for automating "
"complex tasks."
msgstr ""
"因此，使用统一的协议或编程规范来进行测试开发，不仅在对Python生态里分属不同领域、不同团"
"队所开发的各种数据处理工具的集成上具备优势，而且利用功能化的模组也缩短了从处理流程的"
"搭建，到进一步开发工程化应用的所需时间。下面的例子演示了如何对复杂任务建立自动化的处理管道。"

#: ../../source/tutorial/tut_pipe.rst:26
msgid "_`Normalized scientific computing`"
msgstr "规范化科学计算"

#: ../../source/tutorial/tut_pipe.rst:28
#, python-format
msgid ""
"Scientific computing flow implemented through informatics functions is of"
" high completeness. And their units are readily to be flexibly reused "
"when create new processing flow. :numref:`flexibility and reusability of "
"unit` is a snippet in implementation for exporting :numref:`Figure %s "
"<pathological image statistics>`."
msgstr ""
"基于经由informatics包装的函数所构建的科学计算流程，具有很高的完备性。在创建新的处理"
"流程时，已有的管道就可以以一种很灵活的方式被复用。\ :numref:`代码 %s <flexibility and reusability of unit>`\ 是"
"导出\ :numref:`图 %s <pathological image statistics>`\ 的分析脚中的实现片段。"

#: ../../source/tutorial/tut_pipe.rst:32
msgid "flexibility and reusability of unit"
msgstr "管道的灵活性及可复用性"

#: ../../source/tutorial/tut_pipe.rst:44
msgid ""
":code:`to_fig3` corresponds to the case (c). Obtain this figure must "
"overlap the random colored cell nucleus masks, superpositioned with grey "
"scale image, then pass on an image viewer unit. It is the reason unit "
":code:`u1` is arranged paralleled with a sequential processing line "
":code:`u1 >> u2 >> u3 >> u4`."
msgstr ""
"\ :code:`to_fig3`\ 对应着输出子图(c)的逻辑执行。获得这样一张图片必须对标定出的癌细胞核"
"分割进行随机着色，随后与原始的图像灰度图相叠加，最后再统一输出到图像可视化单元。"
"这也就是管道\ :code:`u1`\ 与贯序管道\ :code:`u1 >> u2 >> u3 >> u4`\ 进行并联结构布置的原因。"

#: ../../source/tutorial/tut_pipe.rst:48
#, python-format
msgid ""
"To export the (c) case in :numref:`Figure %s <pathological image "
"statistics>`, call :code:`to_fig3(data=file)`. If a researcher desires "
"other parameters, call :code:`to_fig3(data=file, **user_defined_config)`."
" Or in more complicated situation, if the researcher want to compare "
"outcomes from an identical pipe in different parameters, those derived "
"pipes can also be readily obtained by: :code:`p = "
"to_fig3.shadow(**config1) | to_fig3.shadow(**config2)`."
msgstr ""
"如果需要输出\ :numref:`图 %s (c) <pathological image statistics>`\ 中的结果，则可以"
"调用管道\ :code:`to_fig3(data=file)`\ 。如果研究人员想尝试使用不同的参数，那么则可以通"
"过\ :code:`to_fig3(data=file, **user_defined_config)`\ 来进行使用。又或者对应更复杂"
"的情况，如果研究人员想验证比较相同管道在不同参数下的输出结果，那么新的实验流程则可以通"
"过\ :code:`p = to_fig3.shadow(**config1) | to_fig3.shadow(**config2)`\ 的方式"
"来进行快速搭建。"

#: ../../source/tutorial/tut_pipe.rst:54
msgid "_`Automation experiment`"
msgstr "自动化实验"

#: ../../source/tutorial/tut_pipe.rst:56
msgid ""
"There are also meta tools, for automation computing. The following "
"example concerned the difference between global prewitt and canny filters"
" on a natural image:"
msgstr ""
"另外，这里还提供了自动化计算的元实现。"
"下面的案例流程，是比较在自然图像上应用全局Prewitt及康尼滤波器的区别："

#: ../../source/tutorial/tut_pipe.rst:59
msgid "auto experiment pipeline"
msgstr "自动实验管道"

#: ../../source/tutorial/tut_pipe.rst:80
msgid ""
"It includes data processing functions dealing with cropping, de-noising, "
"and resampling, followed by another paralleled unit of filters. The user-"
"customized process is implemented via lambda calculus: print out the "
"standard deviation of difference between two paralleled output, display "
"their pixel distribution difference, then return those two filtered "
"figures."
msgstr ""
"该自动实验管道包括处理裁剪、去噪和重采样的数据处理功能单元，后接并行的两个滤波器单元。"
"用户对两幅经预处理后的图像打印标准差、绘制像素分布的比较图，最后对两图像进行保存的"
"自定义处理流程，则通过lambda演算予以实现。"

#: ../../source/tutorial/tut_pipe.rst:85
msgid ""
"As most functions in tensor namespace, including the :code:`F` lambda, "
"have been already registered as informatics version, the :code:`p` can "
"automatically analyze what keyword arguments are the required at least. "
"Making a parameter pool based on the required arguments. The following "
"code can auto trigger the experiments then dump each running case."
msgstr ""
"在tensor命名空间里中的大多数函数，也包括\ :code:`F`\ 的lambda演算，均已被封"
"装为informatics的函数版本, （由这类函数搭建起来的）管道\ :code:`p`\ 可以支持"
"自动化地分析那些关键词参数是调用时的必须。基于管道的必要参数可以创建一个参数池。"
"下面的代码可以利用该参数池，自动触发上述实验管道，并对每种参数组合下的运行状况"
"进行记录。"

#: ../../source/tutorial/tut_pipe.rst:90
msgid "run auto experiment"
msgstr "运行自动实验"

#: ../../source/tutorial/tut_pipe.rst:104
#, python-format
msgid ""
"Prompt will info the current condition and calculated standard deviation, "
"running time, and the final result case by case; then the histogram "
"figure will be popped up like :numref:`Figure %s <experiment flow "
"histogram>`."
msgstr ""
"消息记录框将会逐例提示当前状态并计算标准差、记录运行时间，输出保存处理结果；"
"如\ :numref:`图 %s <experiment flow histogram>`\ 的统计直方图，也将于上述"
"步骤结束后弹出。"

#: ../../source/tutorial/tut_pipe.rst:112
msgid "histogram for pixels distribution after prewitt and canny filters"
msgstr "经Prewitt和康尼算子滤波后的像素统计直方图"

#: ../../source/tutorial/tut_pipe.rst:114
msgid ""
"All experiment results will be collected into a persistence file titled "
"`experiment_results.pyp` inplace."
msgstr ""
"而上述所有实验结果将会被持久化至一个名为“experiment_results.pyp”的本地文件中。"

#: ../../source/tutorial/tut_pipe.rst:117
msgid "_`Automation testing`"
msgstr "自动测试框架"

#: ../../source/tutorial/tut_pipe.rst:119
msgid ""
"Different from automation experiment which can export the computed "
"results, the automation testing only records the exit code. If the "
"pipeline exits with raised exception, related information will also be "
"noted. Similar as :code:`experiments` in :numref:`run auto experiment`, "
"this meta implementation :code:`funtest` is in the same namespace. It can"
" test for informatics functions, unit and pipelines defined via this "
"framework."
msgstr ""
"自动化实验可以输出记录最终的结果，与其不同的时，自动化测试框架只记录程序的退"
"出代码。如果测试用例引发了异常，则相关信息也会被捕获和记录。测试框架的调用"
"与在\ :numref:`代码 %s <run auto experiment>`\ 中的\ :code:`experiments`\ 相类似，"
"其元实现\ :code:`funtest`\ 也位于同一个命名空间中。通过这个框架可以对informatics包装的函数、"
"功能单元和管道开展测试。"

#: ../../source/tutorial/tut_pipe.rst:129
msgid "automation testing result for resize function"
msgstr "重采样函数的自动化测试结果"

#: ../../source/tutorial/tut_pipe.rst:131
#, python-format
msgid ""
":numref:`Figure %s <automation testing result>` is the test result for "
":code:`resize` function. Class type remains in *result* column. The cost "
"time, arguments for each test item are also be recorded."
msgstr ""
"\ :numref:`图 %s <automation testing result>`\ 是针对\ :code:`resize`\ 函数的测试结果。"
"输出数据的类型被记录在\ *result*\ 一列里。每次测试的运行时间、运行参数也会被记录在其中。"

#: ../../source/tutorial/tut_pipe.rst
msgid "Authors"
msgstr "译者"

#: ../../source/tutorial/tut_pipe.rst:136
msgid "Chen Zhang"
msgstr "`Marin <381017759@qq.com>`_ ; Chen Zhang"

#: ../../source/tutorial/tut_pipe.rst
msgid "Version"
msgstr "版本"

#: ../../source/tutorial/tut_pipe.rst:137
msgid "0.0.4"
msgstr ""

#: ../../source/tutorial/tut_pipe.rst
msgid "|create|"
msgstr "创建于"

#: ../../source/tutorial/tut_pipe.rst:138
msgid "Feb 7, 2024"
msgstr "2024年2月7日"

