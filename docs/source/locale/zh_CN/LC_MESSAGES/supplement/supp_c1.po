# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Chen Zhang
# This file is distributed under the same license as the informatics
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: informatics 0.0.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-09 22:42+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../source/supplement/supp_c1.rst:2
msgid "_`Functional programming in Python`"
msgstr ""

#: ../../source/supplement/supp_c1.rst:5
msgid "_`Abstraction for behaviors`"
msgstr "对行为抽像"

#: ../../source/supplement/supp_c1.rst:7
msgid ""
"Object-oriented programming (OOP) is the abstraction for things that have"
" *noun* attribute. Just like biological classification, scientists use "
"the context *Domain*, *Kingdom*, *Phylum*, *Class*, *Order*, *Family*, "
"and *Genus* to describe creatures. It is scientifically rigorous, "
"comprehensive, but not such flexible to deal with open set. (for example "
"to describe a totally new specie which can not been interpreted in this "
"system indeed)."
msgstr ""

#: ../../source/supplement/supp_c1.rst:12
msgid ""
"Functional programming (FP) is the abstraction for things that have "
"*verb* attribute. We describe the data without modification *raw*; we "
"define the process steps for data as *preprocessing*; we called the "
"behaviors of extracting informative things from data *feature "
"engineering*; we *train* to find the pattern possibly underlying the "
"data. No matter what investigation in what field we are struggling, we "
"repeat those behaviors step by step, always."
msgstr ""

#: ../../source/supplement/supp_c1.rst:18
msgid "_`Using functions`"
msgstr ""

#: ../../source/supplement/supp_c1.rst:20
msgid ""
"Like many other programming languages, python is also supports multi-"
"paradigm well. The function can be used as value to pass in, the modified"
" function can be return as a value as well, after which the "
":ref:`currying <function currying>` occurs."
msgstr ""

#: ../../source/supplement/supp_c1.rst:26
msgid ""
"The term _`function currying` refers the changes of calling for function "
"with form of :code:`f1(a, b, c)`, into the form as :code:`f2(a)(b)(c)`. "
"In modern programming, this architecture is helpful to decoupling our "
"operation logic on data. In the last form, :code:`f2(a)` return a "
"function that the behavior :code:`a` is determined; then :code:`f2(a)(b)`"
" return the behavior :code:`b` is determined as well; assume the "
":code:`c` is the data, it is clear that data :code:`c` can be processed, "
"if and only if the pre-processes :code:`a` and :code:`b` are pre defined."
msgstr ""

#: ../../source/supplement/supp_c1.rst:33
msgid "For building the function with high reusability, here shows some advice:"
msgstr ""

#: ../../source/supplement/supp_c1.rst:35
msgid "make arguments concise when parameterization"
msgstr ""

#: ../../source/supplement/supp_c1.rst:36
msgid "variable-length arguments will make function easy to be extended"
msgstr ""

#: ../../source/supplement/supp_c1.rst:37
msgid "design for call back in where calculation method might vary"
msgstr ""

#: ../../source/supplement/supp_c1.rst:38
msgid "for one-time manipulating, use lambda"
msgstr ""

#: ../../source/supplement/supp_c1.rst
msgid "Authors"
msgstr ""

#: ../../source/supplement/supp_c1.rst:42
msgid "Chen Zhang"
msgstr ""

#: ../../source/supplement/supp_c1.rst
msgid "Version"
msgstr ""

#: ../../source/supplement/supp_c1.rst:43
msgid "0.0.5"
msgstr ""

#: ../../source/supplement/supp_c1.rst
msgid "|create|"
msgstr ""

#: ../../source/supplement/supp_c1.rst:44
msgid "Jun 16, 2023"
msgstr ""

#~ msgid "0.0.4"
#~ msgstr ""

